import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:parker/components/alert_dialogs.dart';
import 'package:parker/components/custom_text_field.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:parker/constants.dart';
import 'package:parker/services/api_call.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class QrScanner extends StatefulWidget {
  /// QR scanner screen
  /// this provides scanner for the QR code generated by user.
  /// this will decode the QR code and send the data to API server.

  const QrScanner({Key? key}) : super(key: key);
  static String id = 'QrScanner'; // navigation
  static String userStatus = '';

  @override
  State<QrScanner> createState() => _QrScannerState();
}

class _QrScannerState extends State<QrScanner> {
  // firebase cloud store instance for table 'users'
  final CollectionReference _users =
      FirebaseFirestore.instance.collection('users');

  // controller for camera
  MobileScannerController cameraController = MobileScannerController();
  // controller for exit password
  TextEditingController exitPasswordController = TextEditingController();
  // password to exit scanner
  String exitPassword = 'admin';

  late dynamic userData;
  late String entryTime;

  Future<void> sendApiResponse(String url) async {
    /// http post request to send QR code Data

    var apiData = await ApiCall().sendApiData(url);
    Fluttertoast.showToast(
      msg: apiData.toString(),
      toastLength: Toast.LENGTH_SHORT,
      timeInSecForIosWeb: 1,
      backgroundColor: const Color(0x6C8D9CFF),
      textColor: Colors.black54,
      fontSize: 16.0,
    );
  }

  Future<void> getEntryTime(String uid) async {
    /// get entry time form firebase cloud store

    userData = await _users.doc(uid).get();
    entryTime = userData['entryTime'].toString();
  }

  Future<void> addEntryTime(String uid) async {
    /// update entry time on firebase cloud store

    return await _users
        .doc(uid)
        .update({
          'entryTime': DateTime.now().millisecondsSinceEpoch,
        })
        .then((value) => debugPrint("time Added"))
        .catchError((error) =>
            debugPrint("Failed to add time: $error")); //add error case
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        showDialog(
          context: context,
          builder: (_) => AlertDialogs(
            dialogAction: <Widget>[
              CustomTextField(
                obscureText: true,
                customValidator: (value) {
                  // check for password before exit

                  if (value == null || value.isEmpty) {
                    return 'Please enter password';
                  }
                  return null;
                },
                hintText: 'Password',
                textFieldInput: TextInputType.visiblePassword,
                textController: exitPasswordController,
              ),
              TextButton(
                child: const Text(
                  'Yes',
                  style: TextStyle(
                    color: Colors.black54,
                    fontSize: 20.0,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                onPressed: () {
                  // if correct password then exit scanner screen
                  if (exitPassword == exitPasswordController.text) {
                    cameraController.dispose();
                    Navigator.of(context).pop();
                    Navigator.pop(context);
                  } else {
                    // wrong password
                    Fluttertoast.showToast(
                      msg: 'Wrong Password',
                      toastLength: Toast.LENGTH_SHORT,
                      timeInSecForIosWeb: 1,
                      backgroundColor: const Color(0xFFDDEEDF),
                      textColor: Colors.black54,
                      fontSize: 16.0,
                    );
                  }
                },
              ),
            ],
          ),
        );
        return Future.value(false);
      },
      child: SafeArea(
        child: Scaffold(
          appBar: AppBar(
            automaticallyImplyLeading: false,
            title: const Text(
              'Parker',
              style: TextStyle(
                color: kLightTextColor,
              ),
            ),
            backgroundColor: kDarkColor,
            actions: [
              IconButton(
                color: kLightTextColor,
                icon: ValueListenableBuilder(
                  valueListenable: cameraController.torchState,
                  builder: (context, state, child) {
                    // toggle flash for camera
                    switch (state as TorchState) {
                      case TorchState.off:
                        return const Icon(Icons.flash_off, color: Colors.grey);
                      case TorchState.on:
                        return const Icon(
                          Icons.flash_on,
                          color: kLightTextColor,
                        );
                    }
                  },
                ),
                iconSize: 32.0,
                onPressed: () => cameraController.toggleTorch(),
              ),
              IconButton(
                color: kLightTextColor,
                icon: ValueListenableBuilder(
                  valueListenable: cameraController.cameraFacingState,
                  builder: (context, state, child) {
                    // toggle front and back camera
                    switch (state as CameraFacing) {
                      case CameraFacing.front:
                        return const Icon(
                          Icons.camera_front,
                          color: kLightTextColor,
                        );
                      case CameraFacing.back:
                        return const Icon(
                          Icons.camera_rear,
                          color: kLightTextColor,
                        );
                    }
                  },
                ),
                iconSize: 32.0,
                onPressed: () => cameraController.switchCamera(),
              ),
            ],
          ),
          body: MobileScanner(
            controller: cameraController,
            onDetect: (qrCode, args) async {
              // scanner function
              final String? code = qrCode.rawValue;
              Fluttertoast.showToast(
                msg: code.toString(),
                toastLength: Toast.LENGTH_SHORT,
                timeInSecForIosWeb: 1,
                backgroundColor: kToastBackColor,
                textColor: kDarkTextColor,
                fontSize: 16.0,
              );
              if (QrScanner.userStatus == 'entry') {
                // for entry scanner
                await addEntryTime(code!);
                await sendApiResponse('/entry?id=$code');
              } else if (QrScanner.userStatus == 'exit') {
                // for exit scanner
                await getEntryTime(code!);
                await sendApiResponse('/exit?id=$code&entrytime=$entryTime');
              } else {
                // error
                Fluttertoast.showToast(
                  msg: 'Something is Fishy',
                  toastLength: Toast.LENGTH_SHORT,
                  timeInSecForIosWeb: 1,
                  backgroundColor: kToastBackColor,
                  textColor: kDarkTextColor,
                  fontSize: 16.0,
                );
              }
            },
          ),
        ),
      ),
    );
  }
}
